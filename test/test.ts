import { compile, acir_from_bytes } from '@noir-lang/noir_wasm';
import { setup_generic_prover_and_verifier, create_proof, verify_proof, create_proof_with_witness } from '@noir-lang/barretenberg/dest/client_proofs';
import { packed_witness_to_witness } from '@noir-lang/aztec_backend';
import { resolve } from 'path';
import { readFileSync } from 'fs';
import { expect } from 'chai';
import { ethers } from "hardhat";
import { Contract, ContractFactory, utils } from 'ethers';

xdescribe('Should verify proof using abi and acir from typescript', async () => {
    it('Should fail due to insufficient credit score', async () => {
        const compiled_circuit = compile(resolve(__dirname, '../circuits/src/main.nr'));
        const acir = compiled_circuit.circuit;
        const abi = compiled_circuit.abi;

        abi.creditScore = 480;

        const [prover, verifier] = await setup_generic_prover_and_verifier(acir);

        const proof = await create_proof(prover, acir, abi);

        const verified = await verify_proof(verifier, proof);

        expect(verified).eq(false);

    });
    xit('Should pass with sufficiently high credit score', async () => {
        const compiled_circuit = compile(resolve(__dirname, '../circuits/src/main.nr'));
        const acir = compiled_circuit.circuit;
        const abi = compiled_circuit.abi;

        abi.creditScore = 750;

        const [prover, verifier] = await setup_generic_prover_and_verifier(acir);

        const proof = await create_proof(prover, acir, abi);

        const verified = await verify_proof(verifier, proof);

        expect(verified).eq(false);
    });
})

xdescribe('Should verify proof using acir from file and abi for typescript', () => {
    it('Should fail due to insufficient credit score', async () => {
        const acirByteArray = path_to_uint8array(resolve(__dirname, '../circuits/build/test.acir'));
        const acir = acir_from_bytes(acirByteArray);

        const abi = {
            creditScore: 480
        }

        const [prover, verifier] = await setup_generic_prover_and_verifier(acir);

        const proof = await create_proof(prover, acir, abi);

        const verified = await verify_proof(verifier, proof);

        expect(verified).eq(false)
    });

    it('Should pass with sufficiently high credit score', async () => {
        const acirByteArray = path_to_uint8array(resolve(__dirname, '../circuits/build/test.acir'));
        const acir = acir_from_bytes(acirByteArray);

        const abi = {
            creditScore: 720
        }

        const [prover, verifier] = await setup_generic_prover_and_verifier(acir);

        const proof = await create_proof(prover, acir, abi);

        const verified = await verify_proof(verifier, proof);

        expect(verified).eq(true)
    })
});

// describe('Should verify proof using witness array', () => {
//     it('Should pass with sufficient balance', async () => {
//         const acirByteArray = path_to_uint8array(resolve(__dirname, '../circuits/build/p.acir'));
//         const acir = acir_from_bytes(acirByteArray);

//         const witnessByteArray = path_to_uint8array(resolve(__dirname, '../circuits/build/p.tr'));
//         const barretenberg_witness_arr = packed_witness_to_witness(acir, witnessByteArray);

//         const [prover, verifier] = await setup_generic_prover_and_verifier(acir);

//         const proof = await create_proof_with_witness(prover, barretenberg_witness_arr);

//         const verified = await verify_proof(verifier, proof);

//         expect(verified).eq(true)
//     })
// })


xdescribe('Using the solidity verifier', function () {
    let Verifier: ContractFactory;
    let verifierContract: Contract;

    before(async () => {
        Verifier = await ethers.getContractFactory("TurboVerifier");
        verifierContract = await Verifier.deploy();
    });

    it("Should verify using proof generated by typescript wrapper", async () => {
        let acirByteArray = path_to_uint8array(resolve(__dirname, `../circuits/build/test.acir`));
        let acir = acir_from_bytes(acirByteArray);

        let abi = {
            creditScore: 720,
        }

        let [prover, verifier] = await setup_generic_prover_and_verifier(acir);

        const proof = await create_proof(prover, acir, abi);

        // const verified = await verify_proof(verifier, proof);
        // expect(verified).eq(true)

        const sc_verified = await verifierContract.verify(proof);
        expect(sc_verified).eq(true);
    });

});

const path_to_uint8array = (path: string) => {
    let buffer = readFileSync(path);
    return new Uint8Array(buffer);
}